{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AI Interview Q&amp;A","text":""},{"location":"#learn-by-doing-369","title":"Learn By Doing 369","text":"<p>Your comprehensive guide to AI/ML/DL interview preparation.</p>"},{"location":"#available-resources","title":"Available Resources:","text":"<ul> <li>Machine Learning Q&amp;A</li> <li>Deep Learning Q&amp;A</li> </ul>"},{"location":"Deep_Learning_QA/","title":"Deep Learning Q&amp;A Notebook","text":"In\u00a0[\u00a0]: Copied! <pre># Example: A simple neural network in PyTorch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# Define a simple feedforward network\nclass SimpleNN(nn.Module):\n    def __init__(self):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(2, 4)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(4, 1)\n        self.sigmoid = nn.Sigmoid()\n\n    def forward(self, x):\n        x = self.relu(self.fc1(x))\n        x = self.sigmoid(self.fc2(x))\n        return x\n\n# Instantiate model\nmodel = SimpleNN()\nprint(model)\n</pre>  # Example: A simple neural network in PyTorch import torch import torch.nn as nn import torch.optim as optim  # Define a simple feedforward network class SimpleNN(nn.Module):     def __init__(self):         super(SimpleNN, self).__init__()         self.fc1 = nn.Linear(2, 4)         self.relu = nn.ReLU()         self.fc2 = nn.Linear(4, 1)         self.sigmoid = nn.Sigmoid()      def forward(self, x):         x = self.relu(self.fc1(x))         x = self.sigmoid(self.fc2(x))         return x  # Instantiate model model = SimpleNN() print(model)  In\u00a0[\u00a0]: Copied! <pre># Example: Using a simple tensor computation in PyTorch\nx = torch.tensor([[1.0, 2.0], [3.0, 4.0]])\nw = torch.tensor([[0.5], [0.25]])\ny = torch.matmul(x, w)\nprint(\"Input:\", x)\nprint(\"Weights:\", w)\nprint(\"Output:\", y)\n</pre>  # Example: Using a simple tensor computation in PyTorch x = torch.tensor([[1.0, 2.0], [3.0, 4.0]]) w = torch.tensor([[0.5], [0.25]]) y = torch.matmul(x, w) print(\"Input:\", x) print(\"Weights:\", w) print(\"Output:\", y)"},{"location":"Deep_Learning_QA/#deep-learning-qa-notebook","title":"Deep Learning Q&amp;A Notebook\u00b6","text":"<p>This notebook contains theory questions, answers, and coding exercises on Deep Learning.</p>"},{"location":"Deep_Learning_QA/#q1-what-is-deep-learning","title":"Q1: What is Deep Learning?\u00b6","text":"<p>Answer: Deep Learning is a subset of Machine Learning that uses multi-layered neural networks to automatically learn hierarchical representations of data. It is widely used in computer vision, NLP, speech recognition, and generative AI.</p>"},{"location":"Deep_Learning_QA/#q2-difference-between-machine-learning-and-deep-learning","title":"Q2: Difference between Machine Learning and Deep Learning?\u00b6","text":"<p>Answer:</p> <ul> <li>Machine Learning requires manual feature extraction, often using simpler models (e.g., decision trees, SVMs).</li> <li>Deep Learning automatically extracts features using neural networks, often with many hidden layers.</li> </ul>"},{"location":"Deep_Learning_QA/#q3-what-is-an-artificial-neural-network-ann","title":"Q3: What is an Artificial Neural Network (ANN)?\u00b6","text":"<p>Answer: An ANN is a computational model inspired by biological neurons. It consists of layers of nodes (neurons), where each connection has a weight. Training adjusts the weights to minimize error.</p>"},{"location":"Deep_Learning_QA/#q4-what-is-a-convolutional-neural-network-cnn","title":"Q4: What is a Convolutional Neural Network (CNN)?\u00b6","text":"<p>Answer: A CNN is a specialized neural network for processing grid-like data (e.g., images). It uses convolutional layers to automatically learn spatial features, pooling layers for downsampling, and fully connected layers for classification.</p>"},{"location":"Deep_Learning_QA/#q5-what-is-a-recurrent-neural-network-rnn","title":"Q5: What is a Recurrent Neural Network (RNN)?\u00b6","text":"<p>Answer: RNNs are designed for sequential data (e.g., text, speech). They maintain a hidden state that captures dependencies across time steps. Variants include LSTMs and GRUs.</p>"},{"location":"Machine_Learning_QA/","title":"Machine Learning Q&amp;A Notebook","text":"In\u00a0[\u00a0]: Copied! <pre># Example: Linear Regression with scikit-learn\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Data (hours studied vs. score)\nX = np.array([[1], [2], [3], [4], [5]])\ny = np.array([10, 20, 30, 40, 50])\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict\nprint(\"Coefficient:\", model.coef_)\nprint(\"Intercept:\", model.intercept_)\nprint(\"Prediction for 6 hours:\", model.predict([[6]])[0])\n</pre>  # Example: Linear Regression with scikit-learn import numpy as np from sklearn.linear_model import LinearRegression  # Data (hours studied vs. score) X = np.array([[1], [2], [3], [4], [5]]) y = np.array([10, 20, 30, 40, 50])  # Train model model = LinearRegression() model.fit(X, y)  # Predict print(\"Coefficient:\", model.coef_) print(\"Intercept:\", model.intercept_) print(\"Prediction for 6 hours:\", model.predict([[6]])[0])  In\u00a0[\u00a0]: Copied! <pre># Example: Classification with scikit-learn (Logistic Regression)\nfrom sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Load data\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nclf = LogisticRegression(max_iter=200)\nclf.fit(X_train, y_train)\n\n# Evaluate\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\n</pre>  # Example: Classification with scikit-learn (Logistic Regression) from sklearn.datasets import load_iris from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score  # Load data iris = load_iris() X, y = iris.data, iris.target  # Split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # Train model clf = LogisticRegression(max_iter=200) clf.fit(X_train, y_train)  # Evaluate y_pred = clf.predict(X_test) print(\"Accuracy:\", accuracy_score(y_test, y_pred))"},{"location":"Machine_Learning_QA/#machine-learning-qa-notebook","title":"Machine Learning Q&amp;A Notebook\u00b6","text":"<p>This notebook contains theory questions, answers, and coding exercises on Machine Learning.</p>"},{"location":"Machine_Learning_QA/#q1-what-is-machine-learning","title":"Q1: What is Machine Learning?\u00b6","text":"<p>Answer: Machine Learning is a subset of AI that allows systems to learn patterns from data and improve performance without being explicitly programmed.</p>"},{"location":"Machine_Learning_QA/#q2-types-of-machine-learning","title":"Q2: Types of Machine Learning?\u00b6","text":"<p>Answer:</p> <ul> <li>Supervised Learning: Trains on labeled data (e.g., regression, classification).</li> <li>Unsupervised Learning: Finds hidden patterns in unlabeled data (e.g., clustering, dimensionality reduction).</li> <li>Reinforcement Learning: Learns by interacting with an environment and receiving rewards/penalties.</li> </ul>"},{"location":"Machine_Learning_QA/#q3-what-is-overfitting","title":"Q3: What is Overfitting?\u00b6","text":"<p>Answer: Overfitting happens when a model learns the training data too well, including noise, and fails to generalize to unseen data. Solutions include regularization, dropout, and cross-validation.</p>"},{"location":"Machine_Learning_QA/#q4-common-evaluation-metrics","title":"Q4: Common Evaluation Metrics?\u00b6","text":"<p>Answer:</p> <ul> <li>Classification: Accuracy, Precision, Recall, F1-score, ROC-AUC.</li> <li>Regression: Mean Squared Error (MSE), Mean Absolute Error (MAE), R\u00b2 Score.</li> </ul>"}]}